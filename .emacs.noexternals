;; Load packages for emacs 24. Keep package-based stuff separate in loadpackages
;; someday I may want a "bare" emacs file
;;(load "~/.emacs.loadpackages")
(add-hook 'after-init-hook '(lambda ()
	  (load "~/.emacs.loadpackages")
    (load "~/.emacs.methods") 
    (ad-activate 'isearch-search)))
;; emacs methods!

;; activates emacs methods

;; Gotta look good
;; also have to load before viper mode, it changes the cursor color if not
(load "~/.emacs.style")

;; Code to instantiate viper
(setq viper-mode t)
(require 'viper)
(global-unset-key (kbd "C-z")) 

;; uniquify (prefix names)
(require 'uniquify)
(setq
  uniquify-buffer-name-style 'forward
)

;; dvorak
(defadvice switch-to-buffer (after activate-input-method activate)
  (activate-input-method "english-dvorak")
  (set-input-method "english-dvorak"))
 ;; Set font size
(set-face-attribute 'default nil :height 100)

;; Adding in hideshow
(load-library "hideshow")
(add-hook 'python-mode-hook 'hs-minor-mode)

;; change the filename collisions in emacs
(require 'uniquify)
(setq uniquify-buffer-name-style 'forward)

;; ido (listing of file in a directory in minibuffer)

(require 'ido)
(ido-mode 'both)

;; Keybindings

;; Whitespace mode
(global-set-key (kbd "C-c h") 'whitespace-mode)

;; Wind-move 

(global-set-key (kbd "C-x C-l") 'windmove-right)
(global-set-key (kbd "C-x C-h") 'windmove-left)
(global-set-key (kbd "C-x C-k") 'windmove-up)
(global-set-key (kbd "C-x C-j") 'windmove-down)

;; better indenting
(setq-default indent-tabs-mode nil)
(setq-default tab-width 2)

;; Python-mode
(add-hook 'python-mode-hook '(lambda () 
 (setq python-indent 4)))

;; Hippie-expand (haven't really used it yet)

(global-set-key (kbd "C-x C-;") 'hippie-expand)

;; File search, doesn't really work like I want it to

(global-set-key (kbd "C-x C-g") 'find-name-dired)

;; Start a terminal, also doesn't work perfectly

(global-set-key (kbd "C-c C-t") 'ansi-term)

;; Set octave major mode for m files
(add-to-list
    'auto-mode-alist
    '("\\.m$" . octave-mode))

;; Asks if you want emacs asked before closing
(defun ask-before-closing ()
  "Ask whether or not to close, and then close if y was pressed"
  (interactive)
  (if (y-or-n-p (format "Are you sure you want to exit Emacs? "))
      (if (< emacs-major-version 22)
          (save-buffers-kill-terminal)
        (save-buffers-kill-emacs))
    (message "Canceled exit")))

(when window-system
  (global-set-key (kbd "C-x C-c") 'ask-before-closing))


;; This is more auxiliary stuff
(load "~/.emacs.externals") 
(load "~/.emacs.externals_tools") 

