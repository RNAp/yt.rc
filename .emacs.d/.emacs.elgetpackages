;; Set up packages
(setq el-get-sources
      ;; Choosing the github version that's actually being maintained.
      '((:name flymake
         :description "Continuous syntax checking for Emacs."
         :type github
         :pkgname "illusori/emacs-flymake")
        (:name ctable
         :description "Table Component for elisp"
         :type github
         :pkgname "kiwanami/emacs-ctable")
        (:name deferred
         :description "Simple asynchronous functions for emacs lisp"
         :website "https://github.com/kiwanami/emacs-deferred"
         :type github
         :pkgname "kiwanami/emacs-deferred"
         :features "deferred")
        (:name epc
         :description "An RPC stack for Emacs Lisp"
         :type github
         :pkgname "kiwanami/emacs-epc"
         :depends (deferred ctable)) ; concurrent is in deferred package
        (:name jedi
         :description "An awesome Python auto-completion for Emacs"
         :type github
         :submodule nil
         :pkgname "Toumorokoshi/emacs-jedi"
         :build (("make" "requirements"))
         :depends (epc auto-complete))
        (:name flymake-cursor
         :type github
         :pkgname "illusori/emacs-flymake-cursor"
         :description "displays flymake error msg in minibuffer after delay (illusori/github)"
         :website "http://github.com/illusori/emacs-flymake-cursor")
        (:name rainbow-mode :type elpa
            :config (lambda ()
                (defun all-css-modes() (css-mode) (rainbow-mode))
                (add-to-list 'auto-mode-alist '("\\.css$" . all-css-modes)) 
            ))
        (:name highlight-indentation
         :description "Function for highlighting indentation"
         :type git
         :url "https://github.com/antonj/Highlight-Indentation-for-Emacs")
        (:name yaml-mode
         :description "Simple major mode to edit YAML file for emacs"
         :type github
         :pkgname "yoshiki/yaml-mode")
        (:name popup
         :website "https://github.com/auto-complete/popup-el"
         :description "Visual Popup Interface Library for Emacs"
         :type github
         :pkgname "auto-complete/popup-el")
        (:name fuzzy
         :website "https://github.com/auto-complete/fuzzy-el"
         :description "Fuzzy matching utilities for GNU Emacs"
         :type github
         :pkgname "auto-complete/fuzzy-el")
        (:name auto-complete
         :website "http://cx4a.org/software/auto-complete/"
         :description "The most intelligent auto-completion extension."
         :type github
         :pkgname "auto-complete/auto-complete"
         :depends (popup fuzzy))
        (:name yasnippet :type elpa)
        (:name yasnippet
         :website "https://github.com/capitaomorte/yasnippet.git"
         :description "YASnippet is a template system for Emacs."
         :type github
         :pkgname "capitaomorte/yasnippet"
         :features "yasnippet"
         ;; Set up the default snippets directory
         ;;
         ;; Principle: don't override any user settings for
         ;; yas/snippet-dirs, whether those were made with setq or
         ;; customize. If the user doesn't want the default snippets,
         ;; she shouldn't get them!
         :pre-init (unless (or (boundp 'yas/snippet-dirs)
                               (get 'yas/snippet-dirs 'customized-value))
                     (setq yas/snippet-dirs
                           (list (concat el-get-dir
                                         (file-name-as-directory "yasnippet")
                                         "snippets"))))
         ;; Trick customize into believing the standard value includes
         ;; the default snippets. yasnippet would probably do this
         ;; itself, except that it doesn't include an installation
         ;; procedure that sets up the snippets directory, and thus
         ;; doesn't know where those snippets will be installed. See
         ;; http://code.google.com/p/yasnippet/issues/detail?id=179
         :post-init (put 'yas/snippet-dirs 'standard-value
                         ;; as cus-edit.el specifies, "a cons-cell whose
                         ;; car evaluates to the standard value"
                         (list
                          (list
                           'quote
                           (list (concat el-get-dir
                                         (file-name-as-directory "yasnippet")
                                         "snippets")))))
         ;; byte-compile load vc-svn and that fails
         ;; see https://github.com/dimitri/el-get/issues/200
         :compile nil
         :submodule nil)
       (:name multiple-cursors
        :description "An experiment in adding multiple cursors to emacs"
        :type github
        :pkgname "magnars/multiple-cursors.el"
        :features multiple-cursors)
       (:name scala-mode
        :description "Major mode for editing Scala code."
        :type git
        :url "https://github.com/scala/scala-dist.git"
        :build `(("make -C tool-support/src/emacs" ,(concat "ELISP_COMMAND=" el-get-emacs)))
        :load-path ("tool-support/src/emacs")
        :features scala-mode-auto)
       (:name js2-mode
        :website "https://github.com/mooz/js2-mode#readme"
        :description "An improved JavaScript editing mode"
        :type github
        :pkgname "mooz/js2-mode"
        :prepare (autoload 'js2-mode "js2-mode" nil t))
       (:name anything-git-goto :type elpa)
       (:name p4 :type elpa)))
